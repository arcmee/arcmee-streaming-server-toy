import { IUserRepository } from '../../../domain/repositories/IUserRepository';
import { User } from '../../../domain/entities/user.entity';
import { CreateUserInputDto, CreateUserOutputDto } from '../../dtos/user/CreateUser.dto';

export class CreateUserUseCase {
  constructor(private readonly userRepository: IUserRepository) {}

  async execute(input: CreateUserInputDto): Promise<CreateUserOutputDto> {
    const existingUser = await this.userRepository.findByEmail(input.email);
    if (existingUser) {
      throw new Error('User with this email already exists.');
    }

    const user = new User(
      '', // ID will be generated by repository
      input.username,
      input.email,
      input.password
    );

    const createdUser = await this.userRepository.create(user);

    return {
      id: createdUser.id,
      username: createdUser.username,
      email: createdUser.email,
    };
  }
}
