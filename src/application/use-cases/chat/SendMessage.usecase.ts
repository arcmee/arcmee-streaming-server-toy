import { IChatRepository } from '../../../../domain/repositories/IChatRepository';
import { IUserRepository } from '../../../../domain/repositories/IUserRepository';
import { ChatMessage } from '../../../../domain/entities/chat.entity';
import { SendMessageDto } from '../../dtos/chat/SendMessage.dto';

export class SendMessageUseCase {
  constructor(
    private readonly chatRepository: IChatRepository,
    private readonly userRepository: IUserRepository,
  ) {}

  async execute(dto: SendMessageDto): Promise<ChatMessage> {
    const user = await this.userRepository.findById(dto.userId);
    if (!user) {
      throw new Error('User not found');
    }

    const chatMessage = new ChatMessage({
      id: '', // Will be generated by DB
      text: dto.text,
      streamId: dto.streamId,
      userId: dto.userId,
      createdAt: new Date(),
    });

    const savedMessage = await this.chatRepository.create(chatMessage);

    // Attach user object to the message for broadcasting
    savedMessage.user = user;

    return savedMessage;
  }
}
